package com.pranay.interview.graph;

import java.util.Arrays;

public class MinimizeMalwareSpread {
    public static void main(String[] args) {
        int[][] graph = {
                {1, 1, 1},
                {1, 1, 1},
                {1, 1, 1}
        };

        int[] initial = {1, 2};
        int count = minMalwareSpread(graph, initial);
        System.out.println("Ans : " + count);
    }

    private static int minMalwareSpread(int[][] graph, int[] initial) {
        int deletedNode = -1;
        int maxInfected = -1;

        boolean[] visited = new boolean[graph.length];
        Arrays.sort(initial);

        for (int i = 0; i < initial.length; i++) {
            if (visited[initial[i]])
                continue;

            int count = dfs(graph, initial[i], visited);

            if (count > maxInfected) {
                deletedNode = initial[i];
                maxInfected = count;
            }
        }
        return deletedNode;
    }

    private static int dfs(int[][] graph, int node, boolean[] visited) {
        int count = 1;
        visited[node] = true;

        for (int i = 0; i < graph.length; i++) {
            if (visited[i])
                continue;

            if (graph[node][i] == 1)
                count += dfs(graph, i, visited);
        }

        return count;
    }


}
